# narrowly focused ansible deployment playbook for www.mikeandwan.us
---
- name: Configure Service Account
  hosts: webservers
  become: true

  tasks:
    - name: Add Service Account
      ansible.builtin.user:
        name: "{{ svcacct_name }}"
        password: "{{ svcacct_pwd | password_hash('sha512') }}"
        update_password: always
        state: present

    # fedora creates a unique subuid range automatically, so need to do this via usermod here

    - name: Enable Linger for Service Account
      ansible.builtin.command:
        cmd: loginctl enable-linger "{{ svcacct_name | quote }}"

    - name: Add SSH key to authorized_keys
      ansible.posix.authorized_key:
        user: "{{ svcacct_name }}"
        key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"
        state: present

- name: Configure Application
  hosts: webservers
  remote_user: "{{ svcacct_name }}"
  vars:
    pod: pod-maw-www
    img_maw_www: "docker.io/aerisg222/maw-www:latest"
    img_postgres: "docker.io/library/postgres:17.5-bookworm"
    dir_localroot: "{{ lookup('env', 'HOME') }}/maw-www/{{ mawenv }}"
    dir_root: "/home/{{ svcacct_name }}/maw-www"
    dir_pgdata: "{{ dir_root }}/pg-data"
    dir_pgsecrets: "{{ dir_root }}/pg-secrets"
    dir_wwwdp: "{{ dir_root }}/www-data-protection"
    dir_wwwenv: "{{ dir_root }}/www-env"
    dir_wwwsecrets: "{{ dir_root }}/www-secrets"
    dir_google_creds: "{{ dir_root }}/google-creds"

  tasks:
    - name: Create Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ dir_pgdata }}"
        - "{{ dir_pgsecrets }}"
        - "{{ dir_wwwsecrets }}"
        - "{{ dir_wwwdp }}"
        - "{{ dir_wwwenv }}"
        - "{{ dir_google_creds }}"

    - name: Copy Files
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: u+rw
      loop:
        - src: "{{ dir_localroot }}/pg-secrets/psql-postgres"
          dest: "{{ dir_pgsecrets }}"
        - src: "{{ dir_localroot }}/env/maw-www.env"
          dest: "{{ dir_wwwenv }}"
        - src: "{{ dir_localroot }}/google-creds/www-emailer.json"
          dest: "{{ dir_google_creds }}"
        - src: "{{ dir_localroot }}/www-secrets/maw-www.pfx"
          dest: "{{ dir_wwwsecrets }}"
        - src: "{{ dir_localroot }}/www-secrets/npgsql-passfile-svc_maw_www"
          dest: "{{ dir_wwwsecrets }}"

    - name: Pull Container Images
      containers.podman.podman_image:
        name: "{{ item }}"
      loop:
        - "{{ img_maw_www }}"
        - "{{ img_postgres }}"

    - name: Create Pod Quadlet
      containers.podman.podman_pod:
        name: "{{ pod }}"
        state: quadlet
        ports:
          - "8080:8080"

    - name: Create Postgres Quadlet
      containers.podman.podman_container:
        name: maw-www-postgres
        image: "{{ img_postgres }}"
        state: quadlet
        read_only: true
        pod: "{{ pod }}"
        env:
          POSTGRES_PASSWORD_FILE: "/secrets/psql-postgres"
        volumes:
          - "{{ dir_pgdata }}:/var/lib/postgresql/data:Z"
          - "{{ dir_pgsecrets }}:/secrets:ro,Z"
        quadlet_options:
          - "AutoUpdate=registry"
          - "Pull=newer"
          - "ReadOnly=true"
          - |

            [Install]
            WantedBy=default.target

    - name: Create maw-www Quadlet
      containers.podman.podman_container:
        name: maw-www
        image: "{{ img_maw_www }}"
        state: quadlet
        read_only: true
        pod: "{{ pod }}"
        env_files:
          - "{{ dir_wwwenv }}/maw-www.env"
        volumes:
          - "{{ dir_wwwdp }}:/www-data-protection:Z"
          - "{{ dir_wwwsecrets }}:/www-secrets:ro,Z"
        quadlet_options:
          - "AutoUpdate=registry"
          - "Pull=newer"
          - "ReadOnly=true"
          - |

            [After]
            maw-www-postgres.container

            [Requires]
            maw-www-postgres.container

            [Install]
            WantedBy=default.target
